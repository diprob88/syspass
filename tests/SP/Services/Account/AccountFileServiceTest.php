<?php
/**
 * sysPass
 *
 * @author    nuxsmin
 * @link      https://syspass.org
 * @copyright 2012-2018, Rubén Domínguez nuxsmin@$syspass.org
 *
 * This file is part of sysPass.
 *
 * sysPass is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * sysPass is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace SP\Tests\Services\Account;

use SP\Core\Exceptions\InvalidImageException;
use SP\DataModel\FileData;
use SP\DataModel\FileExtData;
use SP\DataModel\ItemSearchData;
use SP\Repositories\NoSuchItemException;
use SP\Services\Account\AccountFileService;
use SP\Services\ServiceException;
use SP\Storage\Database\DatabaseConnectionData;
use SP\Tests\DatabaseTestCase;
use function SP\Tests\setupContext;

/**
 * Class AccountFileServiceTest
 *
 * @package SP\Tests\Services
 */
class AccountFileServiceTest extends DatabaseTestCase
{
    /**
     * @var AccountFileService
     */
    private static $service;

    /**
     * @throws \DI\NotFoundException
     * @throws \SP\Core\Context\ContextException
     * @throws \DI\DependencyException
     */
    public static function setUpBeforeClass()
    {
        $dic = setupContext();

        self::$dataset = 'syspass_accountFile.xml';

        // Datos de conexión a la BBDD
        self::$databaseConnectionData = $dic->get(DatabaseConnectionData::class);

        // Inicializar el servicio
        self::$service = $dic->get(AccountFileService::class);
    }

    /**
     * @throws \SP\Core\Exceptions\ConstraintException
     * @throws \SP\Core\Exceptions\QueryException
     * @throws \SP\Core\Exceptions\SPException
     */
    public function testCreate()
    {
        $file = RESOURCE_DIR . DIRECTORY_SEPARATOR . 'imgs' . DIRECTORY_SEPARATOR . 'add.png';
        $image = file_get_contents($file);

        $data = new FileData();
        $data->setAccountId(2);
        $data->setName('app.png');
        $data->setType('image/png');
        $data->setExtension('PNG');
        $data->setContent($image);
        $data->setSize(filesize($file));

        $this->assertEquals(5, self::$service->create($data));

        $resultData = self::$service->getById(5);

        $this->assertInstanceOf(FileExtData::class, $resultData);
        $this->assertEquals($data->getName(), $resultData->getName());
        $this->assertEquals($data->getType(), $resultData->getType());
        $this->assertEquals($data->getExtension(), $resultData->getExtension());
        $this->assertEquals($data->getSize(), $resultData->getSize());
        $this->assertEquals($data->getAccountId(), $resultData->getAccountId());
        $this->assertEquals($data->getContent(), $resultData->getContent());
        $this->assertEquals($data->getThumb(), $resultData->getThumb());

        $data = new FileData();
        $data->setAccountId(2);
        $data->setName('aaa.txt');
        $data->setType('text/plain');
        $data->setExtension('txt');
        $data->setContent('');
        $data->setSize(0);

        $this->assertEquals(6, self::$service->create($data));

        $resultData = self::$service->getById(6);

        $this->assertInstanceOf(FileExtData::class, $resultData);
        $this->assertEquals($data->getName(), $resultData->getName());
        $this->assertEquals($data->getType(), $resultData->getType());
        $this->assertEquals($data->getExtension(), $resultData->getExtension());
        $this->assertEquals($data->getSize(), $resultData->getSize());
        $this->assertEquals($data->getAccountId(), $resultData->getAccountId());
        $this->assertEquals($data->getContent(), $resultData->getContent());
        $this->assertEquals('no_thumb', $resultData->getThumb());

        $this->assertEquals(5, $this->conn->getRowCount('AccountFile'));
    }

    /**
     * @throws \SP\Core\Exceptions\ConstraintException
     * @throws \SP\Core\Exceptions\QueryException
     * @throws \SP\Core\Exceptions\SPException
     */
    public function testCreateInvalid()
    {
        $this->expectException(InvalidImageException::class);

        $data = new FileData();
        $data->setAccountId(2);
        $data->setName('app.png');
        $data->setType('image/png');
        $data->setExtension('PNG');
        $data->setContent('');
        $data->setSize(0);

        $this->assertEquals(6, self::$service->create($data));
    }

    /**
     * @throws \SP\Core\Exceptions\ConstraintException
     * @throws \SP\Core\Exceptions\QueryException
     */
    public function testSearch()
    {
        $itemSearchData = new ItemSearchData();
        $itemSearchData->setLimitCount(10);
        $itemSearchData->setSeachString('android');

        $result = self::$service->search($itemSearchData);
        /** @var FileExtData[] $data */
        $data = $result->getDataAsArray();

        $this->assertEquals(1, $result->getNumRows());
        $this->assertInstanceOf(FileExtData::class, $data[0]);
        $this->assertEquals('android.png', $data[0]->getName());
        $this->assertEquals('image/png', $data[0]->getType());
        $this->assertEquals('PNG', $data[0]->getExtension());
        $this->assertEquals('Google', $data[0]->getAccountName());
        $this->assertEquals('Google', $data[0]->getClientName());
        $this->assertEquals(4295, $data[0]->getSize());
        $this->assertEquals(1, $data[0]->getAccountId());

        $itemSearchData = new ItemSearchData();
        $itemSearchData->setLimitCount(10);
        $itemSearchData->setSeachString('');

        $result = self::$service->search($itemSearchData);
        $this->assertEquals(3, $result->getNumRows());
    }

    /**
     * @throws \SP\Core\Exceptions\ConstraintException
     * @throws \SP\Core\Exceptions\QueryException
     */
    public function testGetById()
    {
        $data = self::$service->getById(1);

        $this->assertInstanceOf(FileExtData::class, $data);
        $this->assertEquals('sysPass.xml', $data->getName());
        $this->assertEquals('text/xml', $data->getType());
        $this->assertEquals('XML', $data->getExtension());
        $this->assertEquals('Google', $data->getAccountName());
        $this->assertEquals('Google', $data->getClientName());
        $this->assertEquals(1312, $data->getSize());
        $this->assertEquals(1, $data->getAccountId());
        $this->assertEquals(packdata->getContent());
        $this->assertEquals(pack('H*', '6E6F5F7468756D62'), $data->getThumb());

        $data = self::$service->getById(4);

        $this->assertInstanceOf(FileExtData::class, $data);
        $this->assertEquals('android.png', $data->getName());
        $this->assertEquals('image/png', $data->getType());
        $this->assertEquals('PNG', $data->getExtension());
        $this->assertEquals('Google', $data->getAccountName());
        $this->assertEquals('Google', $data->getClientName());
        $this->assertEquals(4295, $data->getSize());
        $this->assertEquals(1, $data->getAccountId());
        $this->assertEquals(packdata->getContent());
        $this->assertEquals(packdata->getThumb());

        $this->assertNull(self::$service->getById(10));
    }

    /**
     * @throws \SP\Core\Exceptions\ConstraintException
     * @throws \SP\Core\Exceptions\QueryException
     */
    public function testGetByIdBatch()
    {
        $data = self::$service->getByIdBatch([1, 2, 3]);

        $this->assertInstanceOf(FileExtData::class, $data[0]);
        $this->assertEquals(1, $data[0]->getId());
        $this->assertInstanceOf(FileExtData::class, $data[1]);
        $this->assertEquals(3, $data[1]->getId());

        $this->assertCount(0, self::$service->getByIdBatch([]));
    }

    /**
     * @throws \SP\Core\Exceptions\ConstraintException
     * @throws \SP\Core\Exceptions\QueryException
     */
    public function testGetInfoById()
    {
        $data = self::$service->getInfoById(1);

        $this->assertInstanceOf(FileExtData::class, $data);
        $this->assertEquals('sysPass.xml', $data->getName());
        $this->assertEquals('text/xml', $data->getType());
        $this->assertEquals('XML', $data->getExtension());
        $this->assertEquals('Google', $data->getAccountName());
        $this->assertEquals('Google', $data->getClientName());
        $this->assertEquals(1312, $data->getSize());
        $this->assertEquals(1, $data->getAccountId());
        $this->assertNull($data->getContent());
        $this->assertNull($data->getThumb());

        $this->assertNull(self::$service->getInfoById(10));
    }

    /**
     * @throws \SP\Core\Exceptions\ConstraintException
     * @throws \SP\Core\Exceptions\QueryException
     */
    public function testGetAll()
    {
        $data = self::$service->getAll();

        $this->assertCount(3, $data);
        $this->assertInstanceOf(FileExtData::class, $data[0]);
        $this->assertEquals(4, $data[0]->getId());
        $this->assertEquals('android.png', $data[0]->getName());
        $this->assertEquals('image/png', $data[0]->getType());
        $this->assertEquals('PNG', $data[0]->getExtension());
        $this->assertEquals('Google', $data[0]->getAccountName());
        $this->assertEquals('Google', $data[0]->getClientName());
        $this->assertEquals(4295, $data[0]->getSize());
        $this->assertEquals(1, $data[0]->getAccountId());
        $this->assertEquals(packdata[0]->getContent());
        $this->assertEquals(packdata[0]->getThumb());
    }

    /**
     * @throws \SP\Core\Exceptions\ConstraintException
     * @throws \SP\Core\Exceptions\QueryException
     */
    public function testGetByAccountId()
    {
        $data = self::$service->getByAccountId(1);

        $this->assertCount(2, $data);
        $this->assertInstanceOf(FileData::class, $data[0]);
        $this->assertEquals(4, $data[0]->getId());
        $this->assertEquals('android.png', $data[0]->getName());
        $this->assertEquals('image/png', $data[0]->getType());
        $this->assertEquals('PNG', $data[0]->getExtension());
        $this->assertEquals(4295, $data[0]->getSize());
        $this->assertEquals(1, $data[0]->getAccountId());

        $this->assertInstanceOf(FileData::class, $data[1]);
        $this->assertEquals(1, $data[1]->getId());
        $this->assertEquals('sysPass.xml', $data[1]->getName());
        $this->assertEquals('text/xml', $data[1]->getType());
        $this->assertEquals('XML', $data[1]->getExtension());
        $this->assertEquals(1312, $data[1]->getSize());
        $this->assertEquals(1, $data[1]->getAccountId());
        $this->assertEquals(packdata[1]->getContent());
        $this->assertEquals(pack('H*', '6E6F5F7468756D62'), $data[1]->getThumb());

        $this->assertCount(0, self::$service->getByAccountId(10));
    }

    /**
     * @throws \SP\Core\Exceptions\ConstraintException
     * @throws \SP\Core\Exceptions\QueryException
     * @throws \SP\Repositories\NoSuchItemException
     */
    public function testDelete()
    {
        self::$service
            ->delete(1)
            ->delete(3);

        $this->assertEquals(1, $this->conn->getRowCount('AccountFile'));

        $this->expectException(NoSuchItemException::class);

        self::$service->delete(10);
    }

    /**
     * @throws \SP\Core\Exceptions\ConstraintException
     * @throws \SP\Core\Exceptions\QueryException
     * @throws \SP\Services\ServiceException
     */
    public function testDeleteByIdBatch()
    {
        $this->assertEquals(2, self::$service->deleteByIdBatch([1, 3]));
        $this->assertEquals(0, self::$service->deleteByIdBatch([]));

        $this->assertEquals(1, $this->conn->getRowCount('AccountFile'));

        $this->expectException(ServiceException::class);

        self::$service->deleteByIdBatch([10]);
    }
}
